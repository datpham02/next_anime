// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String            @id @default(cuid()) @map("_id")
  name             String?
  email            String?           @unique
  emailVerified    DateTime?
  image            String?
  watchList        WatchList[]
  accounts         Account[]
  sessions         Session[]
  continueWatching ContniueWatching?
  comment          Comment[]
  reply            Reply[]
  like             Like[]
  disLike          DisLike[]
}

model VerificationToken {
  id         String   @id @default(cuid()) @map("_id")
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model WatchList {
  id      String  @id @default(cuid()) @map("_id")
  animeId String
  user    User?   @relation(fields: [userId], references: [id])
  userId  String?
}

model ContniueWatching {
  id            String         @id @default(cuid()) @map("_id")
  animeWatching AnimeWatched[]
  user          User           @relation(fields: [userId], references: [id])
  userId        String         @unique
}

model AnimeWatched {
  id                 String            @id @default(cuid()) @map("_id")
  episodeId          String
  episode            Int
  currentTime        Int
  contniueWatching   ContniueWatching? @relation(fields: [contniueWatchingId], references: [id])
  contniueWatchingId String?
}

model Comment {
  id        String    @id @default(cuid()) @map("_id")
  episodeId String
  animeId   String
  content   String
  commentAt DateTime  @default(now()) @db.Timestamp
  user      User?     @relation(fields: [userId], references: [id])
  userId    String?
  reply     Reply[]
  like      Like[]
  disLike   DisLike[]
}

model Reply {
  id        String    @id @default(cuid()) @map("_id")
  content   String
  replyAt   DateTime  @default(now()) @db.Timestamp
  comment   Comment?  @relation(fields: [commentId], references: [id])
  commentId String?
  user      User?     @relation(fields: [userId], references: [id])
  userId    String?
  like      Like[]
  disLike   DisLike[]
}

model Like {
  id        String   @id @default(cuid()) @map("_id")
  comment   Comment? @relation(fields: [commentId], references: [id])
  commentId String?
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  reply     Reply?   @relation(fields: [replyId], references: [id])
  replyId   String?
}

model DisLike {
  id        String   @id @default(cuid()) @map("_id")
  comment   Comment? @relation(fields: [commentId], references: [id])
  commentId String?
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  reply     Reply?   @relation(fields: [replyId], references: [id])
  replyId   String?
}
